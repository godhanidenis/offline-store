{"version":3,"file":"src_app_home_home_module_ts.js","mappings":"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","sources":["./src/app/database.service.ts","./src/app/home/home-routing.module.ts","./src/app/home/home.module.ts","./src/app/home/home.page.ts","./node_modules/@awesome-cordova-plugins/sqlite/__ivy_ngcc__/ngx/index.js"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { SQLite, SQLiteObject } from '@awesome-cordova-plugins/sqlite/ngx';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DatabaseService {\n  constructor(private sqlite: SQLite) {\n  }\n  init() {\n    console.log('CALLED THIS TIME!!!!');\n    this.sqlite\n      .create({\n        name: 'data.db',\n        location: 'default',\n      })\n      .then((db: SQLiteObject) => {\n        db.executeSql(\n          'create table users(name VARCHAR(32), email VARCHAR(32))',\n          []\n        )\n          .then(() => console.log('Executed SQL'))\n          .catch((e) => console.log(e));\n      })\n      .catch((e) => console.log(e));\n  }\n  // constructor(private storage: Storage) {\n  //   this.init();\n  // }\n\n  // async init() {\n  //   // If using, define drivers here: await this.storage.defineDriver(/*...*/);\n  //   const storage = await this.storage.create();\n  //   this._storage = storage;\n  // }\n\n  // storeData(key: string, value: any){\n  //   this._storage?.setItem(key, value);\n  // }\n\n  // fetchData(key: string){\n  //   this._storage?.getItem(key);\n  // }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomePage } from './home.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomePage,\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HomePageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { FormsModule } from '@angular/forms';\nimport { HomePage } from './home.page';\n\nimport { HomePageRoutingModule } from './home-routing.module';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    HomePageRoutingModule\n  ],\n  declarations: [HomePage],\n  providers: []\n})\nexport class HomePageModule {}\n","import { Component } from '@angular/core';\nimport { DatabaseService } from '../database.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: 'home.page.html',\n  styleUrls: ['home.page.scss'],\n})\nexport class HomePage {\n  constructor(private databaseService: DatabaseService) {}\n  todo = {\n    name: '',\n    email: '',\n  };\n  logForm() {\n    this.databaseService.init();\n    console.log(this.todo);\n  }\n}\n","import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AwesomeCordovaNativePlugin, cordova, checkAvailability, cordovaInstance, instancePropertyGet, instancePropertySet } from '@awesome-cordova-plugins/core';\nimport * as ɵngcc0 from '@angular/core';\nvar SQLiteObject = /** @class */ (function () {\n    function SQLiteObject(_objectInstance) {\n        this._objectInstance = _objectInstance;\n    }\n    SQLiteObject.prototype.addTransaction = function (transaction) { return cordovaInstance(this, \"addTransaction\", { \"sync\": true }, arguments); };\n    SQLiteObject.prototype.transaction = function (fn) { return cordovaInstance(this, \"transaction\", { \"successIndex\": 2, \"errorIndex\": 1 }, arguments); };\n    SQLiteObject.prototype.readTransaction = function (fn) { return cordovaInstance(this, \"readTransaction\", {}, arguments); };\n    SQLiteObject.prototype.startNextTransaction = function () { return cordovaInstance(this, \"startNextTransaction\", { \"sync\": true }, arguments); };\n    SQLiteObject.prototype.open = function () { return cordovaInstance(this, \"open\", {}, arguments); };\n    SQLiteObject.prototype.close = function () { return cordovaInstance(this, \"close\", {}, arguments); };\n    SQLiteObject.prototype.executeSql = function (statement, params) { return cordovaInstance(this, \"executeSql\", {}, arguments); };\n    SQLiteObject.prototype.sqlBatch = function (sqlStatements) { return cordovaInstance(this, \"sqlBatch\", {}, arguments); };\n    SQLiteObject.prototype.abortallPendingTransactions = function () { return cordovaInstance(this, \"abortallPendingTransactions\", { \"sync\": true }, arguments); };\n    Object.defineProperty(SQLiteObject.prototype, \"databaseFeatures\", {\n        get: function () { return instancePropertyGet(this, \"databaseFeatures\"); },\n        set: function (value) { instancePropertySet(this, \"databaseFeatures\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SQLiteObject.prototype, \"openDBs\", {\n        get: function () { return instancePropertyGet(this, \"openDBs\"); },\n        set: function (value) { instancePropertySet(this, \"openDBs\", value); },\n        enumerable: false,\n        configurable: true\n    });\n    return SQLiteObject;\n}());\nexport { SQLiteObject };\nvar SQLite = /** @class */ (function (_super) {\n    __extends(SQLite, _super);\n    function SQLite() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SQLite.prototype.create = function (config) {\n        var _this = this;\n        return (function () {\n            if (checkAvailability(_this) === true) {\n                return new Promise(function (resolve, reject) {\n                    sqlitePlugin.openDatabase(config, function (db) { return resolve(new SQLiteObject(db)); }, reject);\n                });\n            }\n        })();\n    };\n    SQLite.prototype.echoTest = function () { return cordova(this, \"echoTest\", {}, arguments); };\n    SQLite.prototype.selfTest = function () { return cordova(this, \"selfTest\", {}, arguments); };\n    SQLite.prototype.deleteDatabase = function (config) { return cordova(this, \"deleteDatabase\", {}, arguments); };\n    SQLite.pluginName = \"SQLite\";\n    SQLite.pluginRef = \"sqlitePlugin\";\n    SQLite.plugin = \"cordova-sqlite-storage\";\n    SQLite.repo = \"https://github.com/litehelpers/Cordova-sqlite-storage\";\n    SQLite.platforms = [\"Android\", \"iOS\", \"macOS\", \"Windows\"];\nSQLite.ɵfac = /*@__PURE__*/ function () { var ɵSQLite_BaseFactory; return function SQLite_Factory(t) { return (ɵSQLite_BaseFactory || (ɵSQLite_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(SQLite)))(t || SQLite); }; }();\nSQLite.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SQLite, factory: function (t) { return SQLite.ɵfac(t); } });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SQLite, [{\n        type: Injectable\n    }], null, null); })();\n    return SQLite;\n}(AwesomeCordovaNativePlugin));\nexport { SQLite };\n\n"],"names":[],"sourceRoot":"webpack:///"}